•	 A locale represents a language, culture, or country; the Locale class in Java provides an
abstraction for this concept.

•	 Each locale can have three entries: the language, country, and variant. You can use standard
codes available for language and country to form locale tags. There are no standard tags for
variants; you can provide variant strings based on your need.

•	 There are many ways to create or get a Locale object corresponding to a locale:
•	 Use the constructor of the Locale class.

•	 Use the forLanguageTag(String languageTag) method in the Locale class.

•	 Build a Locale object by instantiating Locale.Builder and then calling
setLanguageTag() from that object.

•	 Use the predefined static final constants for locales in the Locale class.

•	 A resource bundle is a set of classes or property files that help define a set of keys and map
those keys to locale-specific values.

•	 The class ResourceBundle has two derived classes: PropertyResourceBundle and
ListResourceBundle. You can use ResourceBundle.getBundle() to automatically load a
bundle for a given locale.

•	 The PropertyResourceBundle class provides support for multiple locales in the form of
property files. For each locale, you specify the keys and values in a property file for that locale.
You can use only Strings as keys and values.

•	 The naming convention for a fully qualified resource bundle name is packagequalifier.
bundlename + "_" + language + "_" + country + "_" + (variant + "_#" | "#") +
script + "-" + extensions.

•	 The search sequence to look for a matching resource bundle is presented here. Search starts
from Step 1. If at any step the search finds a match, the resource bundle is loaded. Otherwise,
the search proceeds to the next step.

•	 Step 1: The search starts by looking for an exact match for the resource bundle with the
full name.

•	 Step 2: The last component (the part separated by _) is dropped and the search is
repeated with the resulting shorter name. This process is repeated till the last locale
modifier is left.

•	 Step 3: The search is restarted using the full name of the bundle for the default locale.

•	 Step 4: Search for the resource bundle with just the name of the bundle.

•	 Step 5: The search fails, throwing a MissingBundleException.

•	 For the resource bundles implemented as classes extended from ListResourceBundles, Java
uses the reflection mechanism to find and load the class. You need to make sure that the class
is public so that the reflection mechanism will find the class.

•	 To handle date and time, numbers, and currencies in a culture-sensitive way, you can use the
java.text.Format class and its two main derived classes, NumberFormat and DateFormat.
Figure 15-3 shows Format and its important derived classes.

•	 The NumberFormat class provides methods to format or parse numbers. “Formatting” means
converting a numeric value to a textual form suitable for displaying to users; “parsing” means
converting a number back to numeric form for use in the program. The parse() method
returns a Number if successful; otherwise it throws ParseException (a checked exception).

•	 NumberFormat has many factory methods: getInstance(), getCurrencyInstance(),
getIntegerInstance(), and getPercentInstance().

•	 The Currency class provides good support for handling currency values in a locale-sensitive way.

•	 The DateFormat class provides support for processing date and time in a locale-sensitive
manner.

•	 DateFormat has three overloaded factory methods—getDateInstance(), getTimeInstance(),
and getDateTimeInstance()—that return DateFormat instances for processing date, time,
and both date and time, respectively.

•	 SimpleDateFormat (derived from DateFormat) uses the concept of a pattern string to support
custom formats for date and time. Here is the list of important letters and their meanings for
creating patterns for dates:
G Era (BC/AD)
y Year
Y Week year
M Month (in year)
w Week (in year)
W Week (in month)
D Day (in year)
d Day (in month)
F Day of week in month
E Day name in week
u Day number of week (value range 1–7)
•	 Similarly, here are the important letters useful for defining a custom time pattern:
a Marker for the text am/pm marker
H Hour (value range 0–23)
k Hour (value range 1–24)
K Hour in am/pm (value range 0–11)
h Hour in am/pm (value range 1–12)
m Minute
s Second
S Millisecond
z Time zone (general time zone format)




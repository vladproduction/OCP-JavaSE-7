Which one of the following options correctly creates a JdbcRowSet object?
a) RowSetProvider rowSetProvider = RowSetFactory.newProvider();
JdbcRowSet rowSet = rowSetProvider.createJdbcRowSet();
+++b) RowSetFactory rowSetFactory = RowSetProvider.newFactory();
JdbcRowSet rowSet = rowSetFactory.createJdbcRowSet();
c) JdbcRowSet rowSet = RowSetProvider.newFactory().getJdbcRowSetInstance();
d) JdbcRowSet rowSet = RowSetFactory.newProvider().getInstance(connection, "JdbcRowSet");

Option Analysis:

a) RowSetProvider rowSetProvider = RowSetFactory.newProvider(); JdbcRowSet rowSet = rowSetProvider.createJdbcRowSet();
Incorrect: The RowSetFactory does not have a newProvider() method. It is typically accessed in a different way.

b) RowSetFactory rowSetFactory = RowSetProvider.newFactory(); JdbcRowSet rowSet = rowSetFactory.createJdbcRowSet();
Correct: This correctly utilizes RowSetProvider.newFactory() to get a RowSetFactory, which can then create a JdbcRowSet using its createJdbcRowSet() method.

c) JdbcRowSet rowSet = RowSetProvider.newFactory().getJdbcRowSetInstance();
Incorrect: RowSetProvider.newFactory() is correct, but there is no method called getJdbcRowSetInstance() in the RowSetFactory.

d) JdbcRowSet rowSet = RowSetFactory.newProvider().getInstance(connection, "JdbcRowSet");
Incorrect: RowSetFactory does not have a newProvider() method, and the method used to create a JdbcRowSet doesn't correctly adhere to the API's methods.

Conclusion:
The correct option for creating a JdbcRowSet object is:
b) RowSetFactory rowSetFactory = RowSetProvider.newFactory(); JdbcRowSet rowSet = rowSetFactory.createJdbcRowSet();
